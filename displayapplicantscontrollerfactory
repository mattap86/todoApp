<?php

namespace Portal\Factories;

use Psr\Container\ContainerInterface;
use Portal\Controllers\DisplayApplicantsController;

class DisplayApplicantsControllerFactory
{
    /**
     * @param ContainerInterface $container
     *
     * @return DisplayApplicantsController
     */
    public function __invoke(ContainerInterface $container) : DisplayApplicantsController
    {
        $renderer = $container->get('renderer');
        $applicantModelFactory = $container->get('ApplicantModel');
        return new DisplayApplicantsController($renderer, $applicantModelFactory);
    }
}





<?php

namespace Portal\Controllers;

use \Slim\Http\Request as Request;
use \Slim\Http\Response as Response;
use Slim\Views\PhpRenderer;
use Portal\Models\ApplicantModel;

class DisplayApplicantsController
{
    private $renderer;
    private $todoModel;

    /**
     * DisplayTodosController constructor.
     *
     * @param PhpRenderer $renderer
     *
     * @param ApplicantModel $applicantModel
     */
    public function __construct(PhpRenderer $renderer, ApplicantModel $applicantModel)
    {
        $this->renderer = $renderer;
        $this->applicantModel = $applicantModel;
    }

    /**
     *
     *
     * @param Request $request
     * @param Response $response
     * @param array $args
     *
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function __invoke(Request $request, Response $response, array $args)
    {
        $data = $this->applicantModel->();
        $args['data'] = $data;
        return $this->renderer->render($response, 'displayApplicants.phtml', $args);
    }
}

$app->get('/displayApplicants', 'DisplayApplicantsController');

$container['DisplayAplicantsController'] = new \Portal\Factories\DisplayApplicantsControllerFactory();